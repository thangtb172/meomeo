{"version":3,"sources":["HandleText.js","Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["HandleText","english","list_english","element","push","final_english","trim","split","length","pop","Shuffle","arr","temp","index","ctr","Math","floor","random","App","props","sentences_english","prompt","sentences_vietnames","final_text","checkAnswer","createAnswer","storeIndex","show","i","j","forEach","state","english_text","vietnames_text","guessWord","key","countGuess","bool","handleGuessButtons","bind","handleGuessBox","handleOtherButton","script","document","createElement","src","async","body","appendChild","this","setState","str","evt","ltr","target","value","window","responsiveVoice","speak","k","slice","newAnswer","splice","indexOf","copy","text","SpeechSynthesisUtterance","map","elements","className","onMouseEnter","onClick","join","id","handleReadText","gameStart","generateButtons","console","log","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da836a95.chunk.js","sourcesContent":["function HandleText(english) {\r\n  let list_english = [];\r\n  for (const element of english) {\r\n    list_english.push(element);\r\n  }\r\n\r\n  let final_english = [];\r\n  for (const element of list_english) {\r\n    final_english.push(element.trim().split(\" \"));\r\n  }\r\n  if (final_english.length > 0) {\r\n    final_english.pop();\r\n  }\r\n  return final_english;\r\n}\r\nexport default HandleText;\r\n","function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport HandleText from \"./HandleText\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let sentences_english = prompt(\"Please enter english text\");\n    let sentences_vietnames = prompt(\"Please enter vietnames text\");\n    while (!sentences_vietnames || !sentences_english) {\n      sentences_vietnames = prompt(\"Please enter vietnames text\");\n      while (!sentences_english) {\n        sentences_english = prompt(\"Please enter english text\");\n      }\n    }\n\n    let final_text = HandleText(sentences_english.split(\".\"));\n    const checkAnswer = HandleText(sentences_english.split(\".\"));\n    let createAnswer = [];\n    let storeIndex = [];\n    let show = [];\n    for (let i = 0; i < checkAnswer.length; i++) {\n      let arr = [];\n      storeIndex.push(0);\n      show.push(0);\n      for (let j = 0; j < checkAnswer[i].length; j++) {\n        arr.push(\"___\");\n      }\n      createAnswer.push(arr);\n    }\n    final_text.forEach((element) => {\n      return Shuffle(element);\n    });\n\n    this.state = {\n      english_text: sentences_english.split(\".\"),\n      vietnames_text: sentences_vietnames.split(\".\"),\n      final_text: final_text,\n      guessWord: \"\",\n      checkAnswer: checkAnswer,\n      createAnswer: createAnswer,\n      key: 0,\n      index: 0,\n      storeIndex: storeIndex,\n      countGuess: 0,\n      bool: false,\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n  }\n\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  handleGuessBox(key) {\n    if (key !== this.state.key && this.state.guessWord.length > 0) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, \"UK English Male\");\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr = evt.target.value;\n\n    const k = this.state.storeIndex[this.state.key];\n\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, \"UK English Male\");\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      this.state.checkAnswer[this.state.key][\n        this.state.storeIndex[this.state.key]\n      ] === ltr\n    ) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        window.responsiveVoice.speak(ltr, \"UK English Male\");\n      }\n      final_text[this.state.key].splice(\n        final_text[this.state.key].indexOf(ltr),\n        1\n      );\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n\n        //window.speechSynthesis.speak(msg);\n        window.responsiveVoice.speak(ltr, \"UK English Male\");\n      }\n      newAnswer[this.state.key][this.state.storeIndex[this.state.key]] = ltr;\n      let copy = this.state.storeIndex.slice(0, this.state.storeIndex.length);\n      copy[this.state.key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: ltr,\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n      }));\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = new SpeechSynthesisUtterance(\n          `The next word is ${\n            this.state.checkAnswer[this.state.key][\n              this.state.storeIndex[this.state.key]\n            ]\n          }`\n        );\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, \"UK English Male\");\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n      }\n      this.setState((str) => ({\n        guessWord: ltr,\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        \"UK English Male\"\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n  generateButtons() {\n    return this.state.final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n          <h1>{this.state.vietnames_text[i]}</h1>\n          {/* <h1>{this.state.english_text[i]}</h1> */}\n          <h1>{elements.join(\" \")}</h1>\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              {\" \"}\n              <h1 id=\"meo\">{this.state.english_text[i]}</h1>\n              <button\n                className=\"Button\"\n                key={i}\n                onClick={() => this.handleReadText(i)}\n              >\n                Read Text\n              </button>\n            </div>\n          ) : (\n            \" \"\n          )}\n        </section>\n      );\n    });\n  }\n  render() {\n    let gameStart = this.generateButtons();\n    // console.log(this.state.english_text);\n    // console.log(this.state.guessWord);\n    //console.log(this.state.key);\n    // console.log(this.state.index);\n    // console.log(this.state.storeIndex);\n    // console.log(this.state.createAnswer);\n\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    return (\n      <div className=\"App\">\n        <p className=\"Hangman-btns\">{gameStart}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}