{"version":3,"sources":["HandleText.js","Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["HandleText","english","list_english","element","push","final_english","trim","split","length","pop","Shuffle","arr","temp","index","ctr","Math","floor","random","App","props","state","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","key","storeIndex","countGuess","bool","vietnames","submit","value","voice","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","script","document","createElement","src","async","body","appendChild","this","setState","str","evt","ltr","target","window","responsiveVoice","speak","k","slice","newAnswer","splice","indexOf","copy","text","map","elements","i","className","onMouseEnter","onClick","autoPlay","controls","hidden","id","handleReadText","style","background","border","color","name","event","preventDefault","en_length","vi_length","console","log","show","j","forEach","sentences_english","sentences_vietnames","gameStart","generateButtons","clear","onSubmit","type","placeholder","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f618d1f.chunk.js","sourcesContent":["function HandleText(english) {\r\n  let list_english = [];\r\n  for (const element of english) {\r\n    list_english.push(element);\r\n  }\r\n\r\n  let final_english = [];\r\n  for (const element of list_english) {\r\n    final_english.push(element.trim().split(\" \"));\r\n  }\r\n  if (final_english.length > 0) {\r\n    final_english.pop();\r\n  }\r\n  return final_english;\r\n}\r\nexport default HandleText;\r\n","function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport HandleText from \"./HandleText\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport \"./App.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: \"\",\n      createAnswer: \"\",\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n      voice: \"US English Male\",\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n  }\n\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  handleGuessBox(key) {\n    // && this.state.guessWord.length > 0\n    if (key !== this.state.key) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, this.state.voice);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr = evt.target.value;\n    const key = this.state.key;\n    const storeIndex = this.state.storeIndex;\n    const k = storeIndex[key];\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, this.state.voice);\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (this.state.checkAnswer[key][k] === ltr) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      final_text[key].splice(final_text[key].indexOf(ltr), 1);\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n\n        //window.speechSynthesis.speak(msg);\n        window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      newAnswer[key][k] = ltr;\n      let copy = storeIndex.slice(0, storeIndex.length);\n      copy[key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: ltr,\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n      }));\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${this.state.checkAnswer[key][k]}`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, this.state.voice);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n      }\n      this.setState((str) => ({\n        guessWord: ltr,\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        this.state.voice\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n  generateButtons() {\n    return this.state.final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n          <h1>{this.state.vietnames_text[i]}</h1>\n          {/* <h1>{this.state.english_text[i]}</h1> */}\n          {/* <h1>{elements.join(\" \")}</h1> */}\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              <audio\n                src=\"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                autoPlay\n                controls\n                hidden\n              ></audio>\n              <h1 id=\"meo\">{this.state.english_text[i]}</h1>\n\n              <button\n                className=\"Button\"\n                key={i}\n                onClick={() => this.handleReadText(i)}\n              >\n                Read Text\n              </button>\n            </div>\n          ) : (\n            <div id=\"showanswer\">\n              <button\n                className=\"Button\"\n                style={{\n                  background: \"#2c3e50\",\n                  border: \"none\",\n                  color: \"#e2e5e9\",\n                }}\n                key={i}\n                onClick={() => this.showAnswers(i)}\n              >\n                Show Answer\n              </button>\n            </div>\n          )}\n        </section>\n      );\n    });\n  }\n\n  //handleUpdate() {}\n  handleChange(evt) {\n    this.setState({ [evt.target.name]: evt.target.value });\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let voice = this.state.voice;\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n    switch (value) {\n      case \"showanswer\":\n        for (let i = 0; i < final_text.length; i++) {\n          final_text[i] = [];\n          createAnswer[i] = this.state.checkAnswer[i];\n        }\n        break;\n      case \"usmale\":\n        voice = \"US English Male\";\n        break;\n      case \"usfemale\":\n        voice = \"US English Female\";\n        break;\n      case \"ukmale\":\n        voice = \"UK English Male\";\n        break;\n      case \"ukfemale\":\n        voice = \"UK English Female\";\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      value: value,\n      final_text: final_text,\n      createAnswer: createAnswer,\n      voice: voice,\n    });\n  }\n\n  showAnswers(key) {\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n\n    final_text[key] = [];\n    createAnswer[key] = this.state.checkAnswer[key];\n    this.setState((str) => ({\n      final_text: final_text,\n      createAnswer: createAnswer,\n    }));\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    let english = this.state.english;\n    let vietnames = this.state.vietnames;\n    const en_length = this.state.english.length;\n    const vi_length = this.state.vietnames.length;\n    if (en_length > 0 && vi_length > 0) {\n      if (this.state.english[en_length - 1] !== \".\") {\n        english += \".\";\n        console.log(\"ok\");\n      }\n      if (this.state.vietnames[vi_length - 1] !== \".\") {\n        vietnames += \".\";\n        console.log(\"oker\");\n      }\n      let final_text = HandleText(english.split(\".\"));\n      const checkAnswer = HandleText(english.split(\".\"));\n      let createAnswer = [];\n      let storeIndex = [];\n      let show = [];\n      for (let i = 0; i < checkAnswer.length; i++) {\n        let arr = [];\n        storeIndex.push(0);\n        show.push(0);\n        for (let j = 0; j < checkAnswer[i].length; j++) {\n          arr.push(\"___\");\n        }\n        createAnswer.push(arr);\n      }\n      final_text.forEach((element) => {\n        return Shuffle(element);\n      });\n      let sentences_english = english.split(\".\");\n      let sentences_vietnames = vietnames.split(\".\");\n      console.log(sentences_english.length, sentences_vietnames.length);\n\n      this.setState({\n        english_text: sentences_english,\n        vietnames_text: sentences_vietnames,\n        final_text: final_text,\n        checkAnswer: checkAnswer,\n        createAnswer: createAnswer,\n        storeIndex: storeIndex,\n        submit: false,\n      });\n    }\n  }\n  render() {\n    let gameStart = this.generateButtons();\n    // console.log(this.state.english_text);\n    // console.log(this.state.guessWord);\n    //console.log(this.state.key);\n    // console.log(this.state.index);\n    // console.log(this.state.storeIndex);\n    // console.log(this.state.createAnswer);\n    console.clear();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <form onSubmit={this.handleSubmit} id=\"form\">\n            <label>\n              <input\n                type=\"text\"\n                name=\"english\"\n                placeholder=\"English\"\n                value={this.state.english}\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <input\n                type=\"text\"\n                name=\"vietnames\"\n                placeholder=\"Vietnamese\"\n                value={this.state.vietnames}\n                onChange={this.handleChange}\n              />\n            </label>\n            <button id=\"submit\">Submit!</button>\n          </form>\n        ) : (\n          <div>\n            {/* <button onClick={this.showAnswers} className=\"Button\">\n              Show answer\n            </button> */}\n            <section id=\"meo\">\n              <form onSubmit={this.showAnswers}>\n                <label>\n                  <div className=\"select\">\n                    <select\n                      name=\"slct\"\n                      id=\"slct\"\n                      value={this.state.value}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option value=\"default\">Choose an option</option>\n                      <option value=\"showanswer\">Show Answers</option>\n                      <option value=\"usmale\">US English Male Voice</option>\n                      <option value=\"usfemale\">US English FeMale Voice</option>\n                      <option value=\"ukmale\">UK English Male Voice</option>\n                      <option value=\"ukfemale\">UK English FeMale Voice</option>\n\n                      {/* <option value=\"2\">No JS</option>\n                      <option value=\"3\">Nice!</option> */}\n                    </select>\n                  </div>\n                </label>\n              </form>\n            </section>\n            <p className=\"Hangman-btns\">{gameStart}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}