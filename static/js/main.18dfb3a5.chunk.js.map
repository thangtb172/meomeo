{"version":3,"sources":["Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["Shuffle","audioElement","App","props","state","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","key","index","storeIndex","countGuess","bool","english","vietnames","submit","value","voice","valueInput","inputArr","urlDownLoad","urlYouTuBe","captions","duration","starts","durations","count","results","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","playAudio","script","document","createElement","src","async","body","appendChild","prevProps","prevState","this","length","split","Promise","resolve","xhr","XMLHttpRequest","url","slice","open","onreadystatechange","readyState","DONE","status","console","log","onload","e","responseText","onerror","undefined","error","send","then","val","result","replace","RegExp","pop","i","arr","textOfStartDuration","start","push","show","j","setState","str","evt","ltr","target","window","responsiveVoice","speak","err","k","toLowerCase","newAnswer","splice","indexOf","copy","text","startTime","pause","setAttribute","addEventListener","currentTime","_startTime","play","map","elements","className","onMouseEnter","element","onClick","type","name","placeholder","onChange","id","autoPlay","controls","hidden","style","background","border","color","newCheckAnswer","s","Audio","includes","event","preventDefault","gameStart","generateButtons","clear","onSubmit","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18dfb3a5.chunk.js","sourcesContent":["function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport HandleText from \"./HandleText\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport \"./App.css\";\nvar audioElement;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: [],\n      createAnswer: [],\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n      voice: \"US English Male\",\n      valueInput: \"\",\n      inputArr: [],\n      urlDownLoad: \"\",\n      urlYouTuBe: \"\",\n      captions: [],\n      duration: \"\",\n      audioElement: \"\",\n      starts: [],\n      durations: [],\n      count: 0,\n      results: [],\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n  }\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.urlYouTuBe !== this.state.urlYouTuBe) {\n      if (\n        this.state.captions.length === 0 &&\n        this.state.urlYouTuBe.length > 0\n      ) {\n        let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n\n        let captions = [];\n        let starts = [];\n        let durations = [];\n        let response = new Promise((resolve) => {\n          const xhr = new XMLHttpRequest(),\n            method = \"GET\",\n            url =\n              \"https://video.google.com/timedtext?&lang=en&v=\" +\n              urlYouTuBe[3].slice(0, 11);\n\n          xhr.open(method, url, true);\n          xhr.onreadystatechange = function () {\n            // In local files, status is 0 upon success in Mozilla Firefox\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n              var status = xhr.status;\n              if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                console.log(\"OK\");\n              } else {\n                // Oh no! There has been an error with the request!\n              }\n            }\n          };\n\n          xhr.onload = function (e) {\n            resolve(xhr.responseText);\n          };\n          xhr.onerror = function () {\n            resolve(undefined);\n            console.error(\"** An error occurred during the XMLHttpRequest\");\n          };\n          xhr.send(null);\n        });\n        response.then((val) => {\n          let string = val\n            .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n            .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n            .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n            .split(\"<transcript>\");\n          let result = string[1].split(\"</text>\");\n          result.pop();\n          for (let i = 0; i < result.length; i++) {\n            let arr = result[i].split(\">\");\n            let textOfStartDuration = arr[0].split(\" \");\n            let start = textOfStartDuration[1].split(\"=\")[1];\n            let duration = textOfStartDuration[2].split(\"=\")[1];\n\n            captions.push(\n              arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n            );\n            starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n            durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n          }\n          let length = captions.length;\n          let results = [];\n          if (length % 2 === 0) {\n            for (let i = 0; i < length; i += 2) {\n              results.push(captions[i] + \" \" + captions[i + 1]);\n            }\n          } else {\n            for (let i = 0; i < length - 1; i += 2) {\n              results.push(captions[i] + \" \" + captions[i + 1]);\n            }\n            results.push(captions[length - 1]);\n          }\n          let createAnswer = [];\n          let inputArr = [];\n          let storeIndex = [];\n          let show = [];\n          let checkAnswer = [];\n          let final_text = [];\n          for (let i = 0; i < results.length; i++) {\n            let arr = [];\n            checkAnswer.push(results[i].split(\" \"));\n            final_text.push(results[i].split(\" \"));\n            inputArr.push(true);\n            storeIndex.push(0);\n            show.push(0);\n            for (let j = 0; j < results[i].split(\" \").length; j++) {\n              arr.push(\"___\");\n            }\n            createAnswer.push(arr);\n          }\n\n          this.setState({\n            captions: captions,\n            starts: starts,\n            durations: durations,\n            results: results,\n            final_text: final_text,\n            createAnswer: createAnswer,\n            inputArr: inputArr,\n            storeIndex: storeIndex,\n            show: show,\n            checkAnswer: checkAnswer,\n          });\n        });\n      }\n    }\n  }\n\n  handleGuessBox(key) {\n    // && this.state.guessWord.length > 0\n    if (key !== this.state.key) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, this.state.voice);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr;\n    try {\n      ltr = evt.target.value;\n    } catch (err) {\n      ltr = evt;\n    }\n\n    console.log(ltr);\n    const key = this.state.key;\n    const storeIndex = this.state.storeIndex;\n    const k = storeIndex[key];\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, this.state.voice);\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      this.state.checkAnswer[key][k].replace(\",\", \"\").toLowerCase() ===\n      ltr.replace(\",\", \"\").toLowerCase()\n    ) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        // window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      final_text[key].splice(\n        final_text[key].indexOf(this.state.checkAnswer[key][k]),\n        1\n      );\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        //window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      newAnswer[key][k] = this.state.checkAnswer[key][k];\n      let copy = storeIndex.slice(0, storeIndex.length);\n      copy[key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: this.state.checkAnswer[key][k],\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n        valueInput: \"\",\n      }));\n      if (k + 1 === this.state.checkAnswer[key].length) {\n        this.setState((str) => ({\n          index: 0,\n        }));\n      }\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${this.state.checkAnswer[key][k]}`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, this.state.voice);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n        this.setState((str) => ({\n          valueInput: \"\",\n        }));\n      }\n      this.setState((str) => ({\n        guessWord: this.state.checkAnswer[key][k],\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        this.state.voice\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n\n  playAudio(index) {\n    let { starts, durations, results } = this.state;\n    let startTime, duration;\n    if (index === results.length - 1) {\n      startTime = starts[index * 2];\n      if (results.length % 2 !== 0) {\n        duration = durations[index * 2] + durations[index * 2 + 1] + 1;\n      } else {\n        duration = durations[index * 2] + 1;\n      }\n      console.log(\"start\", startTime, \"dur\", duration);\n    } else {\n      startTime = starts[index * 2];\n      duration = starts[index * 2 + 2] - starts[index * 2] - 0.15;\n      console.log(\"start\", startTime, \"dur\", duration);\n    }\n    console.log(\"Text: \", results[index]);\n    try {\n      audioElement.pause();\n    } catch (error) {\n      console.log(\"Don't Worry\");\n    }\n    audioElement = document.createElement(\"video\");\n\n    audioElement.setAttribute(\"src\", this.state.urlDownLoad);\n    audioElement.addEventListener(\"timeupdate\", function () {\n      //console.log(audioElement.currentTime);\n      if (\n        audioElement.currentTime - audioElement._startTime >=\n        audioElement.value\n      ) {\n        audioElement.pause();\n      }\n    });\n\n    audioElement.value = duration;\n    audioElement._startTime = startTime;\n    audioElement.currentTime = startTime;\n    audioElement.play();\n  }\n  generateButtons() {\n    let { results } = this.state;\n\n    return results.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n          {this.state.final_text[i].length > 0 ? (\n            <div>\n              <input\n                type=\"text\"\n                name=\"valueInput\"\n                placeholder=\"Typing Answer\"\n                value={this.state.key === i ? this.state.valueInput : \"\"}\n                onChange={(evt) => this.handleChange(evt, i)}\n                id=\"typingAnswer\"\n              />\n            </div>\n          ) : (\n            <p></p>\n          )}\n\n          <button className=\"Button\" key={i} onClick={() => this.playAudio(i)}>\n            Listening\n          </button>\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              <audio\n                src=\"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                autoPlay\n                controls\n                hidden\n              ></audio>\n              <h1 id=\"meo\">{this.state.results[i]}</h1>\n            </div>\n          ) : (\n            <div>\n              <button\n                className=\"Button\"\n                style={{\n                  background: \"#2c3e50\",\n                  border: \"none\",\n                  color: \"#e2e5e9\",\n                }}\n                key={i}\n                onClick={() => this.showAnswers(i)}\n              >\n                Show Answer\n              </button>\n            </div>\n          )}\n        </section>\n      );\n    });\n  }\n\n  //handleUpdate() {}\n\n  handleChange(evt, key) {\n    let index = this.state.index;\n    let checkAnswer = this.state.checkAnswer;\n    let inputArr = this.state.inputArr;\n    let copy = inputArr.slice(0, inputArr.length);\n    let final_text = this.state.final_text;\n    this.setState(\n      {\n        [evt.target.name]: evt.target.value,\n      },\n      function () {\n        if (checkAnswer.length > 0) {\n          let newCheckAnswer = final_text[key].map((s) =>\n            s.replace(\",\", \"\").toLowerCase()\n          );\n          if (this.state.valueInput === \"meowmeow\") {\n            window.responsiveVoice.speak(\"You say meowmeow\", this.state.voice);\n            if (this.state.final_text[key].length === 0) {\n              this.setState({\n                valueInput: \"\",\n                index: index + 1,\n              });\n            } else {\n              this.handleGuessButtons(checkAnswer[key][index]);\n              this.setState({\n                valueInput: \"\",\n              });\n            }\n          }\n          if (\n            this.state.valueInput.toLowerCase() ===\n              checkAnswer[key][index].toLowerCase() &&\n            this.state.final_text[key].length === 0\n          ) {\n            window.responsiveVoice.speak(\n              this.state.valueInput,\n              this.state.voice\n            );\n            if (index === checkAnswer[key].length - 1) {\n              var audio = new Audio(\n                \"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n              );\n              audio.play();\n              console.log(\"Yes\");\n              copy[key] = false;\n            }\n\n            this.setState({\n              valueInput: \"\",\n              index: index + 1,\n              inputArr: copy,\n            });\n          } else if (\n            newCheckAnswer.includes(this.state.valueInput.toLowerCase())\n          ) {\n            this.handleGuessButtons(this.state.valueInput.toLowerCase());\n          }\n        }\n      }\n    );\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let voice = this.state.voice;\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n    switch (value) {\n      case \"showanswer\":\n        for (let i = 0; i < final_text.length; i++) {\n          final_text[i] = [];\n          createAnswer[i] = this.state.checkAnswer[i];\n        }\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      value: value,\n      final_text: final_text,\n      createAnswer: createAnswer,\n      voice: voice,\n    });\n  }\n\n  showAnswers(key) {\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n\n    final_text[key] = [];\n    createAnswer[key] = this.state.checkAnswer[key];\n    this.setState((str) => ({\n      final_text: final_text,\n      createAnswer: createAnswer,\n    }));\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n    let urlDownLoad = this.state.urlDownLoad;\n\n    if (urlYouTuBe.length > 0 && urlDownLoad.length > 0) {\n      this.setState({\n        submit: false,\n      });\n    }\n  }\n\n  render() {\n    let gameStart = this.generateButtons();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    console.clear();\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <form onSubmit={this.handleSubmit} id=\"form\">\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlDownLoad\"\n                placeholder=\"LinkDownLoad\"\n                value={this.state.urlDownLoad}\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlYouTuBe\"\n                placeholder=\"LinkYouTuBe\"\n                value={this.state.urlYouTuBe}\n                onChange={this.handleChange}\n              />\n            </label>\n            <button id=\"submit\">Submit!</button>\n          </form>\n        ) : (\n          <div>\n            {/* <button onClick={this.showAnswers} className=\"Button\">\n              Show answer\n            </button> */}\n            <section id=\"meo\">\n              <form onSubmit={this.showAnswers}>\n                <label>\n                  <div className=\"select\">\n                    <select\n                      name=\"slct\"\n                      id=\"slct\"\n                      value={this.state.value}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option value=\"default\">Choose an option</option>\n                      <option value=\"showanswer\">Show Answers</option>\n                      <option value=\"usmale\">US English Male Voice</option>\n                      <option value=\"usfemale\">US English FeMale Voice</option>\n                      <option value=\"ukmale\">UK English Male Voice</option>\n                      <option value=\"ukfemale\">UK English FeMale Voice</option>\n                    </select>\n                  </div>\n                </label>\n              </form>\n            </section>\n            <p className=\"Hangman-btns\">{gameStart}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}