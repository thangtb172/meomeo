{"version":3,"sources":["HandleText.js","Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["HandleText","english","list_english","element","push","final_english","trim","split","length","pop","Shuffle","arr","temp","index","ctr","Math","floor","random","App","props","state","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","key","storeIndex","countGuess","bool","vietnames","submit","value","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","script","document","createElement","src","async","body","appendChild","this","setState","str","evt","ltr","target","window","responsiveVoice","speak","k","slice","newAnswer","splice","indexOf","copy","text","map","elements","i","className","onMouseEnter","onClick","join","id","handleReadText","name","event","alert","preventDefault","en_length","vi_length","console","log","show","j","forEach","sentences_english","sentences_vietnames","gameStart","generateButtons","clear","onSubmit","type","placeholder","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c8be8ff.chunk.js","sourcesContent":["function HandleText(english) {\r\n  let list_english = [];\r\n  for (const element of english) {\r\n    list_english.push(element);\r\n  }\r\n\r\n  let final_english = [];\r\n  for (const element of list_english) {\r\n    final_english.push(element.trim().split(\" \"));\r\n  }\r\n  if (final_english.length > 0) {\r\n    final_english.pop();\r\n  }\r\n  return final_english;\r\n}\r\nexport default HandleText;\r\n","function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport HandleText from \"./HandleText\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: \"\",\n      createAnswer: \"\",\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n  }\n\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  handleGuessBox(key) {\n    if (key !== this.state.key && this.state.guessWord.length > 0) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, \"US English Male\");\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr = evt.target.value;\n\n    const k = this.state.storeIndex[this.state.key];\n\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, \"US English Male\");\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      this.state.checkAnswer[this.state.key][\n        this.state.storeIndex[this.state.key]\n      ] === ltr\n    ) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        window.responsiveVoice.speak(ltr, \"US English Male\");\n      }\n      final_text[this.state.key].splice(\n        final_text[this.state.key].indexOf(ltr),\n        1\n      );\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n\n        //window.speechSynthesis.speak(msg);\n        window.responsiveVoice.speak(ltr, \"US English Male\");\n      }\n      newAnswer[this.state.key][this.state.storeIndex[this.state.key]] = ltr;\n      let copy = this.state.storeIndex.slice(0, this.state.storeIndex.length);\n      copy[this.state.key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: ltr,\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n      }));\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${\n          this.state.checkAnswer[this.state.key][\n            this.state.storeIndex[this.state.key]\n          ]\n        }`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, \"US English Male\");\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n      }\n      this.setState((str) => ({\n        guessWord: ltr,\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        \"US English Male\"\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n  generateButtons() {\n    return this.state.final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n          <h1>{this.state.vietnames_text[i]}</h1>\n          {/* <h1>{this.state.english_text[i]}</h1> */}\n          <h1>{elements.join(\" \")}</h1>\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              {\" \"}\n              <h1 id=\"meo\">{this.state.english_text[i]}</h1>\n              <button\n                className=\"Button\"\n                key={i}\n                onClick={() => this.handleReadText(i)}\n              >\n                Read Text\n              </button>\n            </div>\n          ) : (\n            \" \"\n          )}\n        </section>\n      );\n    });\n  }\n\n  //handleUpdate() {}\n  handleChange(evt) {\n    this.setState({ [evt.target.name]: evt.target.value });\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let copy = this.state.final_text.slice(0, this.state.final_text.length);\n    if (value === \"showanswer\") {\n      for (let i = 0; i < copy.length; i++) {\n        copy[i] = [];\n      }\n    }\n    this.setState({ value: value, final_text: copy });\n  }\n\n  showAnswers(event) {\n    // let copy = this.state.final_text.slice(0, this.state.final_text.length);\n    // for (let i = 0; i < copy.length; i++) {\n    //   copy[i] = [];\n    // }\n    // this.setState((str) => ({\n    //   final_text: copy,\n    // }));\n    alert(\"Your favorite flavor is: \" + this.state.value);\n    event.preventDefault();\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    let english = this.state.english;\n    let vietnames = this.state.vietnames;\n    const en_length = this.state.english.length;\n    const vi_length = this.state.vietnames.length;\n    if (en_length > 0 && vi_length > 0) {\n      if (this.state.english[en_length - 1] !== \".\") {\n        english += \".\";\n        console.log(\"ok\");\n      }\n      if (this.state.vietnames[vi_length - 1] !== \".\") {\n        vietnames += \".\";\n        console.log(\"oker\");\n      }\n      let final_text = HandleText(english.split(\".\"));\n      const checkAnswer = HandleText(english.split(\".\"));\n      let createAnswer = [];\n      let storeIndex = [];\n      let show = [];\n      for (let i = 0; i < checkAnswer.length; i++) {\n        let arr = [];\n        storeIndex.push(0);\n        show.push(0);\n        for (let j = 0; j < checkAnswer[i].length; j++) {\n          arr.push(\"___\");\n        }\n        createAnswer.push(arr);\n      }\n      final_text.forEach((element) => {\n        return Shuffle(element);\n      });\n      let sentences_english = english.split(\".\");\n      let sentences_vietnames = vietnames.split(\".\");\n      console.log(sentences_english.length, sentences_vietnames.length);\n\n      this.setState({\n        english_text: sentences_english,\n        vietnames_text: sentences_vietnames,\n        final_text: final_text,\n        checkAnswer: checkAnswer,\n        createAnswer: createAnswer,\n        storeIndex: storeIndex,\n        submit: false,\n      });\n    }\n  }\n  render() {\n    let gameStart = this.generateButtons();\n    // console.log(this.state.english_text);\n    // console.log(this.state.guessWord);\n    //console.log(this.state.key);\n    // console.log(this.state.index);\n    // console.log(this.state.storeIndex);\n    // console.log(this.state.createAnswer);\n    console.clear();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <form onSubmit={this.handleSubmit} id=\"form\">\n            <label>\n              <input\n                type=\"text\"\n                name=\"english\"\n                placeholder=\"English\"\n                value={this.state.english}\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <input\n                type=\"text\"\n                name=\"vietnames\"\n                placeholder=\"Vietnamese\"\n                value={this.state.vietnames}\n                onChange={this.handleChange}\n              />\n            </label>\n            <button id=\"submit\">Submit!</button>\n          </form>\n        ) : (\n          <div>\n            {/* <button onClick={this.showAnswers} className=\"Button\">\n              Show answer\n            </button> */}\n            <section id=\"meo\">\n              <form onSubmit={this.showAnswers}>\n                <label>\n                  <div className=\"select\">\n                    <select\n                      name=\"slct\"\n                      id=\"slct\"\n                      value={this.state.value}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option value=\"default\">Choose an option</option>\n                      <option value=\"showanswer\">Show Answers</option>\n                      {/* <option value=\"2\">No JS</option>\n                      <option value=\"3\">Nice!</option> */}\n                    </select>\n                  </div>\n                </label>\n              </form>\n            </section>\n\n            <p className=\"Hangman-btns\">{gameStart}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}