{"version":3,"sources":["../node_modules/encoding/lib sync","HandleText.js","Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","HandleText","english","list_english","element","push","final_english","trim","split","length","pop","Shuffle","arr","temp","index","ctr","Math","floor","random","App","props","sentences_english","prompt","sentences_vietnames","final_text","checkAnswer","createAnswer","storeIndex","show","i","j","forEach","state","english_text","vietnames_text","guessWord","key","countGuess","bool","handleGuessButtons","bind","handleGuessBox","handleOtherButton","this","setState","str","evt","ltr","target","value","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","k","slice","newAnswer","splice","indexOf","copy","text","rate","map","elements","className","onMouseEnter","onClick","join","handleReadText","gameStart","generateButtons","console","log","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b2938d2.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 126;","function HandleText(english) {\r\n  let list_english = [];\r\n  for (const element of english) {\r\n    list_english.push(element);\r\n  }\r\n\r\n  let final_english = [];\r\n  for (const element of list_english) {\r\n    final_english.push(element.trim().split(\" \"));\r\n  }\r\n  if (final_english.length > 0) {\r\n    final_english.pop();\r\n  }\r\n  return final_english;\r\n}\r\nexport default HandleText;\r\n","function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport HandleText from \"./HandleText\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport \"./App.css\";\nimport translate from \"translate\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    let sentences_english = prompt(\"Please enter english text\");\n    let sentences_vietnames = prompt(\"Please enter vietnames text\");\n    while (!sentences_vietnames || !sentences_english) {\n      sentences_vietnames = prompt(\"Please enter vietnames text\");\n      while (!sentences_english) {\n        sentences_english = prompt(\"Please enter english text\");\n      }\n    }\n    let final_text = HandleText(sentences_english.split(\".\"));\n    const checkAnswer = HandleText(sentences_english.split(\".\"));\n    let createAnswer = [];\n    let storeIndex = [];\n    let show = [];\n    for (let i = 0; i < checkAnswer.length; i++) {\n      let arr = [];\n      storeIndex.push(0);\n      show.push(0);\n      for (let j = 0; j < checkAnswer[i].length; j++) {\n        arr.push(\"___\");\n      }\n      createAnswer.push(arr);\n    }\n    final_text.forEach(element => {\n      return Shuffle(element);\n    });\n\n    this.state = {\n      english_text: sentences_english.split(\".\"),\n      vietnames_text: sentences_vietnames.split(\".\"),\n      final_text: final_text,\n      guessWord: \"\",\n      checkAnswer: checkAnswer,\n      createAnswer: createAnswer,\n      key: 0,\n      index: 0,\n      storeIndex: storeIndex,\n      countGuess: 0,\n      bool: false\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n  }\n\n  handleGuessBox(key) {\n    if (key !== this.state.key && this.state.guessWord.length > 0) {\n      this.setState(str => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      var msg = new SpeechSynthesisUtterance(ltr);\n      window.speechSynthesis.speak(msg);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr = evt.target.value;\n\n    const k = this.state.storeIndex[this.state.key];\n\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      var msg = new SpeechSynthesisUtterance(ltr);\n      window.speechSynthesis.speak(msg);\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      this.state.checkAnswer[this.state.key][\n        this.state.storeIndex[this.state.key]\n      ] === ltr\n    ) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        msg = new SpeechSynthesisUtterance(ltr);\n        window.speechSynthesis.speak(msg);\n      }\n      final_text[this.state.key].splice(\n        final_text[this.state.key].indexOf(ltr),\n        1\n      );\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        msg = new SpeechSynthesisUtterance(ltr);\n        window.speechSynthesis.speak(msg);\n      }\n      newAnswer[this.state.key][this.state.storeIndex[this.state.key]] = ltr;\n      let copy = this.state.storeIndex.slice(0, this.state.storeIndex.length);\n      copy[this.state.key] = k + 1;\n      this.setState(str => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: ltr,\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false\n      }));\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = new SpeechSynthesisUtterance(\n          `The next word is ${\n            this.state.checkAnswer[this.state.key][\n              this.state.storeIndex[this.state.key]\n            ]\n          }`\n        );\n        window.speechSynthesis.speak(text);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n      }\n      this.setState(str => ({\n        guessWord: ltr,\n        countGuess: countGuess,\n        bool: true\n      }));\n    }\n  }\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      msg.rate = 0.8;\n      window.speechSynthesis.speak(msg);\n    }\n  }\n  generateButtons() {\n    return this.state.final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n          <h1>{this.state.vietnames_text[i]}</h1>\n          {/* <h1>{this.state.english_text[i]}</h1> */}\n          <h1>{elements.join(\" \")}</h1>\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              {\" \"}\n              <h1 id=\"meo\">{this.state.english_text[i]}</h1>\n              <button\n                className=\"Button\"\n                key={i}\n                onClick={() => this.handleReadText(i)}\n              >\n                Read Text\n              </button>\n            </div>\n          ) : (\n            \" \"\n          )}\n        </section>\n      );\n    });\n  }\n  render() {\n    let gameStart = this.generateButtons();\n    // console.log(this.state.english_text);\n    // console.log(this.state.guessWord);\n    //console.log(this.state.key);\n    // console.log(this.state.index);\n    // console.log(this.state.storeIndex);\n    // console.log(this.state.createAnswer);\n\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    return (\n      <div className=\"App\">\n        <p className=\"Hangman-btns\">{gameStart}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}